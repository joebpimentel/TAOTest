// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.4.7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_codegen.cpp:149

#ifndef _TAO_IDL__HOME_JOEBP_WORKSPACE_CORBA_TAO_TAO_CALC_CALC_SRC_MAIN_CPP_CALCC_XFNJD5_H_
#define _TAO_IDL__HOME_JOEBP_WORKSPACE_CORBA_TAO_TAO_CALC_CALC_SRC_MAIN_CPP_CALCC_XFNJD5_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 4 || TAO_MICRO_VERSION != 7
#error This file should be regenerated with TAO_IDL
#endif

// TAO_IDL - Generated from
// /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:35

namespace br
{

  // TAO_IDL - Generated from
  // /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:35

  namespace org
  {

    // TAO_IDL - Generated from
    // /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:35

    namespace joe
    {

      // TAO_IDL - Generated from
      // /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_interface.cpp:748

#if !defined (_BR_ORG_JOE_CALC__VAR_OUT_CH_)
#define _BR_ORG_JOE_CALC__VAR_OUT_CH_

      class Calc;
      typedef Calc *Calc_ptr;
      typedef TAO_Objref_Var_T<Calc> Calc_var;
      typedef TAO_Objref_Out_T<Calc> Calc_out;
      

#endif /* end #if !defined */

      // TAO_IDL - Generated from
      // /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:40

      class  Calc
        : public virtual ::CORBA::Object
      {
      public:
        friend class TAO::Narrow_Utils<Calc>;

        // TAO_IDL - Generated from
        // /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_type.cpp:304

        typedef Calc_ptr _ptr_type;
        typedef Calc_var _var_type;
        typedef Calc_out _out_type;

        static void _tao_any_destructor (void *);

        // The static operations.
        static Calc_ptr _duplicate (Calc_ptr obj);

        static void _tao_release (Calc_ptr obj);

        static Calc_ptr _narrow (::CORBA::Object_ptr obj);
        static Calc_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
        static Calc_ptr _nil (void);

        virtual ::CORBA::Double doCalc (
          ::CORBA::Double value);

        virtual void shutdown (
          void);

        // TAO_IDL - Generated from
        // /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:137

        virtual ::CORBA::Boolean _is_a (const char *type_id);
        virtual const char* _interface_repository_id (void) const;
        virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
      
      protected:
        // Concrete interface only.
        Calc (void);

        // Concrete non-local interface only.
        Calc (
            ::IOP::IOR *ior,
            TAO_ORB_Core *orb_core);
        
        // Non-local interface only.
        Calc (
            TAO_Stub *objref,
            ::CORBA::Boolean _tao_collocated = false,
            TAO_Abstract_ServantBase *servant = 0,
            TAO_ORB_Core *orb_core = 0);

        virtual ~Calc (void);
      
      private:
        // Private and unimplemented for concrete interfaces.
        Calc (const Calc &);

        void operator= (const Calc &);
      };

      // TAO_IDL - Generated from
      // /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:34

      extern  ::CORBA::TypeCode_ptr const _tc_Calc;
    
    // TAO_IDL - Generated from
    // /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:64
    
    } // module br::org::joe
  
  // TAO_IDL - Generated from
  // /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:64
  
  } // module br::org

// TAO_IDL - Generated from
// /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:64

} // module br

// TAO_IDL - Generated from
// /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:145

#if !defined (_BR_ORG_JOE_CALC__ARG_TRAITS_)
#define _BR_ORG_JOE_CALC__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::br::org::joe::Calc>
    : public
        Object_Arg_Traits_T<
            ::br::org::joe::Calc_ptr,
            ::br::org::joe::Calc_var,
            ::br::org::joe::Calc_out,
            TAO::Objref_Traits<br::org::joe::Calc>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_BR_ORG_JOE_CALC__TRAITS_)
#define _BR_ORG_JOE_CALC__TRAITS_

  template<>
  struct  Objref_Traits< ::br::org::joe::Calc>
  {
    static ::br::org::joe::Calc_ptr duplicate (
        ::br::org::joe::Calc_ptr p);
    static void release (
        ::br::org::joe::Calc_ptr p);
    static ::br::org::joe::Calc_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::br::org::joe::Calc_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace br
{
  
  namespace org
  {
    
    namespace joe
    {
       void operator<<= ( ::CORBA::Any &, Calc_ptr); // copying
       void operator<<= ( ::CORBA::Any &, Calc_ptr *); // non-copying
       ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Calc_ptr &);
    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, br::org::joe::Calc_ptr); // copying
 void operator<<= (::CORBA::Any &, br::org::joe::Calc_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, br::org::joe::Calc_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const br::org::joe::Calc_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, br::org::joe::Calc_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// /home/joebp/workspace/corba/ACE_TAO/TAO/TAO_IDL/be/be_codegen.cpp:1686
#if defined (__ACE_INLINE__)
#include "CalcC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

